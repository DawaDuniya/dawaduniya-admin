// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model store {
  id           String         @id @default(uuid())
  name         String
  userId       String
  billBoard    Billboard[]    @relation("StoreToBillboard")
  category     Category[]     @relation("StoreToCategory")
  // sizes     Size[]      @relation("StoreToSize")
  order        Book[]         @relation("StoreToOrder")
  // colors    Color[]     @relation("StoreToColor")
  products     Product[]      @relation("StoreToProduct")
  prescription Prescription[] @relation("StoreToPrescriptions")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Billboard {
  id        String     @id @default(uuid())
  storeId   String
  store     store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  category  Category[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id           String      @id @default(uuid())
  storeId      String
  store        store       @relation("StoreToProduct", fields: [storeId], references: [id])
  name         String
  brand        String
  introduction String
  use          String
  sideEffect   String
  direction    String
  subtitle     String
  quantity     Int 
  price        Decimal
  discount     Decimal
  categoryId   String
  category     Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  isFeatured   Boolean     @default(false)
  isArchived   Boolean     @default(false)
  images       Image[]
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Prescription {
  id          String   @id @default(uuid())
  storeId     String
  store       store    @relation("StoreToPrescriptions", fields: [storeId], references: [id])
  name        String
  phoneNumber String   @default("")
  imageURL    String
  createdAt   DateTime @default(now())

  @@index([storeId])
}

model Book {
  id              String      @id @default(uuid())
  storeId         String
  cust_name       String
  store           store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems      OrderItem[]
  isPaid          Boolean     @default(false)
  orderedQuantity Int
  phone           String      @default("")
  address         String      @default("")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  quantity  Int
  order     Book    @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
